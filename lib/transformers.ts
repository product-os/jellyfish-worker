/*
 * Copyright (C) Balena.io - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * Proprietary and confidential.
 */

import * as Bluebird from 'bluebird';
import * as _ from 'lodash';
import * as skhema from 'skhema';
import { v4 as uuidv4 } from 'uuid';
import { getLogger } from '@balena/jellyfish-logger';
import { JSONSchema, core } from '@balena/jellyfish-types';
import { LogContext, QueueWaitResult, EnqueueOptions } from './types';

const logger = getLogger('worker');

export interface EvaluateOptions {
	transformers: core.Contract[];
	oldCard: core.Contract | null;
	newCard: core.Contract;
	context: LogContext;
	query: (
		schema: JSONSchema,
		opts: { sortBy?: string; sortDir?: 'asc' | 'desc'; limit?: number },
	) => Promise<core.Contract[]>;
	// TS-TODO: Make slug optional in core model
	executeAndAwaitAction: (
		actionRequest: EnqueueOptions,
	) => Promise<QueueWaitResult>;
}

// TS-TODO: Transformers should be a default model and included in this module
export const evaluate = async ({
	transformers,
	oldCard,
	newCard,
	context,
	query,
	executeAndAwaitAction,
}: EvaluateOptions): Promise<null> => {
	if (!transformers || !Array.isArray(transformers)) {
		return null;
	}

	if (!oldCard) {
		return null;
	}

	// Only evaluate transformers if `data.$transformer.artifactReady` is truthy and has been changed,
	// so irrelevant updates don't re-trigger a transformer
	const oldReady = _.get(oldCard.data, ['$transformer', 'artifactReady']);
	const newReady = _.get(newCard.data, ['$transformer', 'artifactReady']);
	if (oldReady !== newReady && newReady) {
		await Bluebird.map(transformers, async (transformer) => {
			// TODO: Allow transformer input filter to match $$links, by re-using the trigger filter
			const match =
				transformer.data.inputFilter &&
				skhema.isValid(transformer.data.inputFilter as any, newCard);

			if (match) {
				// The transformer should be run on behalf of the actor that owns the
				// transformer
				const [transformerOwner] = await query(
					{
						type: 'object',
						properties: {
							active: {
								const: true,
							},
						},
						$$links: {
							owns: {
								type: 'object',
								properties: {
									id: {
										const: transformer.id,
									},
								},
							},
						},
					},
					{
						limit: 1,
					},
				);

				let transformerActor = transformerOwner;

				// Or by the actor that owns its contract-repository
				if (!transformerActor) {
					const [repoOwner] = await query(
						{
							type: 'object',
							properties: {
								active: {
									const: true,
								},
							},
							$$links: {
								owns: {
									type: 'object',
									required: ['type', 'data'],
									properties: {
										type: {
											const: 'contract-repository@1.0.0',
										},
										active: {
											const: true,
										},
										data: {
											type: 'object',
											required: ['base_slug'],
											properties: {
												base_slug: {
													const: transformer.slug,
												},
											},
										},
									},
								},
							},
						},
						{
							limit: 1,
						},
					);
					transformerActor = repoOwner;
				}

				if (transformerActor) {
					const actionRequest = {
						card: 'task@1.0.0',
						type: 'type',
						action: 'action-create-card@1.0.0',
						actor: transformerActor.id,
						arguments: {
							reason: null,
							properties: {
								name: `Transform ${newCard.id} using transformer ${transformer.id}`,
								data: {
									status: 'pending',
									input: newCard,
									transformer,
									actor: transformerActor.id,
									workerFilter: {
										schema: transformer.data.workerFilter,
									},
								},
							},
						},
					};

					// Re enqueue an action request to call the matchmaking function
					// TODO: link task to origin transformer
					const result = await executeAndAwaitAction(actionRequest);

					// TODO: Improve core API for linking cards
					await executeAndAwaitAction({
						card: 'link@1.0.0',
						type: 'type',
						action: 'action-create-card@1.0.0',
						actor: transformerActor.id,
						arguments: {
							reason: null,
							properties: {
								type: 'link@1.0.0',
								slug: `link-${transformer.id}-generated-${
									result.data.id
								}-${uuidv4()}`,
								name: 'generated',
								data: {
									inverseName: 'was generated by',
									from: {
										id: transformer.id,
										type: transformer.type,
									},
									to: {
										id: result.data.id,
										type: result.data.type,
									},
								},
							},
						},
					});
				} else {
					logger.warn(
						context,
						'Cannot run transformer that does not have an owner',
						{
							transformer: transformer.id,
						},
					);
				}
			}
		});
	}
	return null;
};
